(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(factory((global.MyListTree = global.MyListTree || {})));
}(this, (function (exports) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */



var __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
};

/**
 * Turn an element into a tree.
 * @param elm an element.
 */
function treeify(elm, options, nonroot, lastchild) {
    /**
     * `elm` should have the following structure:
     * <elm>
     *   text
     *   <ul>
     *     <li>child 1</li>
     *     ...
     *   </ul>
     * </elm>
     */
    if (nonroot === void 0) { nonroot = false; }
    if (lastchild === void 0) { lastchild = false; }
    var childNodes = elm.childNodes, doc = elm.ownerDocument;
    var label = undefined;
    var ul = undefined;
    for (var i = 0; i < childNodes.length; i++) {
        var child = childNodes[i];
        if (child.nodeType === Node.ELEMENT_NODE && child.tagName === 'UL') {
            // ラベルの範囲
            label = doc.createRange();
            label.setStartBefore(childNodes[0]);
            label.setEndBefore(child);
            ul = child;
            break;
        }
    }
    if (label == null) {
        // これはleafだよ
        label = doc.createRange();
        label.selectNodeContents(elm);
    }
    // labelを包む
    var labelNode = doc.createElement('div');
    labelNode.classList.add(options.labelMain);
    label.surroundContents(labelNode);
    var labelWrapperNode = doc.createElement('div');
    labelWrapperNode.classList.add(options.label);
    if (nonroot) {
        labelWrapperNode.classList.add(options.labelNonRoot);
    }
    if (lastchild) {
        labelWrapperNode.classList.add(options.labelLastChild);
    }
    label.surroundContents(labelWrapperNode);
    // 横線を追加
    if (nonroot) {
        var liner = doc.createElement('div');
        liner.classList.add(options.labelLine);
        labelWrapperNode.insertBefore(liner, labelWrapperNode.firstChild);
    }
    // ulも包む
    if (ul != null) {
        var ulNode = doc.createElement('div');
        ulNode.classList.add(options.children);
        elm.replaceChild(ulNode, ul);
        ulNode.appendChild(ul);
        // ulの各childに再帰的に適用
        var childNodes_1 = ul.childNodes;
        var lastchild_1 = true;
        for (var i = childNodes_1.length - 1; i >= 0; i--) {
            var child = childNodes_1[i];
            if (child.nodeType === Node.ELEMENT_NODE && child.tagName === 'LI') {
                if (lastchild_1) {
                    child.classList.add(options.liLastChild);
                }
                treeify(child, options, true, lastchild_1);
                lastchild_1 = false;
            }
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkMsR0FBRyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDN0IsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUV2QixtQkFBbUI7UUFFZixJQUFBLDRCQUFVLENBQ1A7UUFDUCxJQUFJLFdBQVMsR0FBRyxJQUFJLENBQUM7UUFDckIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBVSxDQUFDLE1BQU0sR0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBQyxDQUFDO1lBQzNDLElBQU0sS0FBSyxHQUFHLFlBQVUsQ0FBQyxDQUFDLENBQWdCLENBQUM7WUFDM0MsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsWUFBWSxJQUFJLEtBQUssQ0FBQyxPQUFPLEtBQUssSUFBSSxDQUFDLENBQUEsQ0FBQztnQkFDaEUsRUFBRSxDQUFDLENBQUMsV0FBUyxDQUFDLENBQUEsQ0FBQztvQkFDWCxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzdDLENBQUM7Z0JBQ0QsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVMsQ0FBQyxDQUFDO2dCQUN6QyxXQUFTLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLENBQUM7UUFDTCxDQUFDO0lBQ0wsQ0FBQztBQUNMLENBQUMiLCJmaWxlIjoidHJlZWlmeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgT3B0aW9ucyxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogVHVybiBhbiBlbGVtZW50IGludG8gYSB0cmVlLlxuICogQHBhcmFtIGVsbSBhbiBlbGVtZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmVlaWZ5KGVsbTogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IE9wdGlvbnMsIG5vbnJvb3Q6IGJvb2xlYW4gPSBmYWxzZSwgbGFzdGNoaWxkOiBib29sZWFuID0gZmFsc2UpOiB2b2lke1xuICAgIC8qKlxuICAgICAqIGBlbG1gIHNob3VsZCBoYXZlIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuICAgICAqIDxlbG0+XG4gICAgICogICB0ZXh0XG4gICAgICogICA8dWw+XG4gICAgICogICAgIDxsaT5jaGlsZCAxPC9saT5cbiAgICAgKiAgICAgLi4uXG4gICAgICogICA8L3VsPlxuICAgICAqIDwvZWxtPlxuICAgICAqL1xuXG4gICAgY29uc3Qge1xuICAgICAgICBjaGlsZE5vZGVzLFxuICAgICAgICBvd25lckRvY3VtZW50OiBkb2MsXG4gICAgfSA9IGVsbTtcbiAgICBsZXQgbGFiZWw6IFJhbmdlIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICAgIGxldCB1bDogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkTm9kZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkTm9kZXNbaV0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgY2hpbGQudGFnTmFtZSA9PT0gJ1VMJyl7XG4gICAgICAgICAgICAvLyDjg6njg5njg6vjga7nr4Tlm7JcbiAgICAgICAgICAgIGxhYmVsID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgICAgICBsYWJlbC5zZXRTdGFydEJlZm9yZShjaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgICAgIGxhYmVsLnNldEVuZEJlZm9yZShjaGlsZCk7XG4gICAgICAgICAgICB1bCA9IGNoaWxkIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGxhYmVsID09IG51bGwpe1xuICAgICAgICAvLyDjgZPjgozjga9sZWFm44Gg44KIXG4gICAgICAgIGxhYmVsID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgICAgIGxhYmVsLnNlbGVjdE5vZGVDb250ZW50cyhlbG0pO1xuICAgIH1cblxuICAgIC8vIGxhYmVs44KS5YyF44KAXG4gICAgY29uc3QgbGFiZWxOb2RlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGxhYmVsTm9kZS5jbGFzc0xpc3QuYWRkKG9wdGlvbnMubGFiZWxNYWluKTtcbiAgICBsYWJlbC5zdXJyb3VuZENvbnRlbnRzKGxhYmVsTm9kZSk7XG4gICAgY29uc3QgbGFiZWxXcmFwcGVyTm9kZSA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBsYWJlbFdyYXBwZXJOb2RlLmNsYXNzTGlzdC5hZGQob3B0aW9ucy5sYWJlbCk7XG4gICAgaWYgKG5vbnJvb3Qpe1xuICAgICAgICBsYWJlbFdyYXBwZXJOb2RlLmNsYXNzTGlzdC5hZGQob3B0aW9ucy5sYWJlbE5vblJvb3QpO1xuICAgIH1cbiAgICBpZiAobGFzdGNoaWxkKXtcbiAgICAgICAgbGFiZWxXcmFwcGVyTm9kZS5jbGFzc0xpc3QuYWRkKG9wdGlvbnMubGFiZWxMYXN0Q2hpbGQpO1xuICAgIH1cbiAgICBsYWJlbC5zdXJyb3VuZENvbnRlbnRzKGxhYmVsV3JhcHBlck5vZGUpO1xuICAgIC8vIOaoque3muOCkui/veWKoFxuICAgIGlmIChub25yb290KXtcbiAgICAgICAgY29uc3QgbGluZXIgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGxpbmVyLmNsYXNzTGlzdC5hZGQob3B0aW9ucy5sYWJlbExpbmUpO1xuICAgICAgICBsYWJlbFdyYXBwZXJOb2RlLmluc2VydEJlZm9yZShsaW5lciwgbGFiZWxXcmFwcGVyTm9kZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICAvLyB1bOOCguWMheOCgFxuICAgIGlmICh1bCAhPSBudWxsKXtcbiAgICAgICAgY29uc3QgdWxOb2RlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB1bE5vZGUuY2xhc3NMaXN0LmFkZChvcHRpb25zLmNoaWxkcmVuKTtcbiAgICAgICAgZWxtLnJlcGxhY2VDaGlsZCh1bE5vZGUsIHVsKTtcbiAgICAgICAgdWxOb2RlLmFwcGVuZENoaWxkKHVsKTtcblxuICAgICAgICAvLyB1bOOBruWQhGNoaWxk44Gr5YaN5biw55qE44Gr6YGp55SoXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNoaWxkTm9kZXMsXG4gICAgICAgIH0gPSB1bDtcbiAgICAgICAgbGV0IGxhc3RjaGlsZCA9IHRydWU7XG4gICAgICAgIGZvciAobGV0IGkgPSBjaGlsZE5vZGVzLmxlbmd0aC0xOyBpID49IDA7IGktLSl7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNoaWxkTm9kZXNbaV0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFICYmIGNoaWxkLnRhZ05hbWUgPT09ICdMSScpe1xuICAgICAgICAgICAgICAgIGlmIChsYXN0Y2hpbGQpe1xuICAgICAgICAgICAgICAgICAgICBjaGlsZC5jbGFzc0xpc3QuYWRkKG9wdGlvbnMubGlMYXN0Q2hpbGQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cmVlaWZ5KGNoaWxkLCBvcHRpb25zLCB0cnVlLCBsYXN0Y2hpbGQpO1xuICAgICAgICAgICAgICAgIGxhc3RjaGlsZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIl19

/**
 * Write default CSS.
 * @param options options.
 */
function writeCSS(options, doc) {
    var css = cssText(options);
    var style = doc.createElement('style');
    style.textContent = css;
    doc.head.appendChild(style);
}
function cssText(options) {
    return "\ndiv." + options.children + " {\n    margin: 0 0 0 " + options.indentTree + ";\n}\ndiv." + options.labelNonRoot + " + div." + options.children + " {\n    margin-left: calc(" + options.indentTree + " + " + options.indentChildren + ");\n}\ndiv." + options.children + " > ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n}\ndiv." + options.children + " > ul > li {\n    border-left: 1px solid black;\n    padding: 0 0 0.4em 0;\n}\ndiv." + options.children + " > ul > li." + options.liLastChild + " {\n    border-left: none;\n}\ndiv." + options.label + " {\n    display: flex;\n}\ndiv." + options.labelLine + " {\n    align-self: flex-start;\n    width: " + options.indentChildren + ";\n    border-bottom: 1px solid black;\n    transform: translate(0, calc(0.5em + " + options.labelTopPadding + "));\n}\nli." + options.noBranchClass + " div." + options.labelLine + " {\n    border-bottom: none;\n}\nli." + options.liLastChild + " div." + options.labelLine + " {\n    border-left: 1px solid black;\n    height: calc(0.5em + " + options.labelTopPadding + ");\n    transform: none;\n}\ndiv." + options.labelNonRoot + " div." + options.labelMain + " {\n    padding: " + options.labelTopPadding + " 0 0 0;\n}\n";
}

function run(selector, options, doc) {
    if (doc === void 0) { doc = document; }
    if (options == null) {
        options = {};
    }
    var options2 = getOptions(options);
    var elms = doc.querySelectorAll(selector);
    for (var i = 0; i < elms.length; i++) {
        treeify(elms[i], options2);
    }
    writeCSS(options2, doc);
}
/**
 * assign default values to options.
 * @param options possibly partial options.
 * @returns full options.
 */
function getOptions(options) {
    var prefix = randomString();
    return __assign({ noBranchClass: '${prefix}-no-branch', label: prefix + "-label", labelMain: prefix + "-label-main", labelNonRoot: prefix + "-label-non-root", labelLastChild: prefix + "-label-last-child", labelLine: prefix + "-label-line", children: prefix + "-children", liLastChild: prefix + "-tree-li-last-child", indentTree: '1em', indentChildren: '3em', labelTopPadding: '0.2em' }, options);
}
/**
 * Generate short random string.
 */
function randomString() {
    return 't' + Math.random().toString(36).slice(2);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBSUEsT0FBTyxPQUFPLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFDSCxRQUFRLEdBQ1gsTUFBTSxPQUFPLENBQUM7QUFFZixPQUFPLEVBQ0gsT0FBTyxHQUNWLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sY0FBYyxRQUFnQixFQUFFLE9BQTBCLEVBQUUsR0FBNEI7SUFBNUIsb0JBQUEsRUFBQSxjQUE0QjtJQUMxRixFQUFFLENBQUMsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLENBQUEsQ0FBQztRQUNqQixPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFDRCxJQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsSUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBQyxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFnQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxRQUFRLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxxQkFBcUIsT0FBeUI7SUFDaEQsSUFBTSxNQUFNLEdBQUcsWUFBWSxFQUFFLENBQUM7SUFDOUIsTUFBTSxvQkFDRixhQUFhLEVBQUUscUJBQXFCLEVBQ3BDLEtBQUssRUFBSyxNQUFNLFdBQVEsRUFDeEIsU0FBUyxFQUFLLE1BQU0sZ0JBQWEsRUFDakMsWUFBWSxFQUFLLE1BQU0sb0JBQWlCLEVBQ3hDLGNBQWMsRUFBSyxNQUFNLHNCQUFtQixFQUM1QyxTQUFTLEVBQUssTUFBTSxnQkFBYSxFQUNqQyxRQUFRLEVBQUssTUFBTSxjQUFXLEVBQzlCLFdBQVcsRUFBSyxNQUFNLHdCQUFxQixFQUMzQyxVQUFVLEVBQUUsS0FBSyxFQUNqQixjQUFjLEVBQUUsS0FBSyxFQUNyQixlQUFlLEVBQUUsT0FBTyxJQUVwQixPQUFPLEVBQ2I7QUFDTixDQUFDO0FBRUQ7O0dBRUc7QUFDSDtJQUNJLE1BQU0sQ0FBQyxHQUFHLEdBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkQsQ0FBQyIsImZpbGUiOiJsaWIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIE9wdGlvbnMsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgdHJlZWlmeSBmcm9tICcuL3RyZWVpZnknO1xuaW1wb3J0IHtcbiAgICB3cml0ZUNTUyxcbn0gZnJvbSAnLi9jc3MnO1xuXG5leHBvcnQge1xuICAgIHRyZWVpZnksXG59O1xuXG4vKipcbiAqIFRyZWVpZnkgYWxsIG5vZGVzIHRoYXQgbWF0Y2ggZ2l2ZW4gc2VsZWN0b3IuXG4gKiBAcGFyYW0gc2VsZWN0b3Igc2VsZWN0b3IuXG4gKiBAcGFyYW0gb3B0aW9ucyBvcHRpb25zLlxuICogQHBhcmFtIFtkb2NdIGRvY3VtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuKHNlbGVjdG9yOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPE9wdGlvbnM+LCBkb2M6IEhUTUxEb2N1bWVudCA9IGRvY3VtZW50KTogdm9pZHtcbiAgICBpZiAob3B0aW9ucyA9PSBudWxsKXtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zMiA9IGdldE9wdGlvbnMob3B0aW9ucyk7XG4gICAgY29uc3QgZWxtcyA9IGRvYy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsbXMubGVuZ3RoOyBpKyspe1xuICAgICAgICB0cmVlaWZ5KGVsbXNbaV0gYXMgSFRNTEVsZW1lbnQsIG9wdGlvbnMyKTtcbiAgICB9XG5cbiAgICB3cml0ZUNTUyhvcHRpb25zMiwgZG9jKTtcbn1cblxuLyoqXG4gKiBhc3NpZ24gZGVmYXVsdCB2YWx1ZXMgdG8gb3B0aW9ucy5cbiAqIEBwYXJhbSBvcHRpb25zIHBvc3NpYmx5IHBhcnRpYWwgb3B0aW9ucy5cbiAqIEByZXR1cm5zIGZ1bGwgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvbnMob3B0aW9uczogUGFydGlhbDxPcHRpb25zPik6IE9wdGlvbnN7XG4gICAgY29uc3QgcHJlZml4ID0gcmFuZG9tU3RyaW5nKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbm9CcmFuY2hDbGFzczogJyR7cHJlZml4fS1uby1icmFuY2gnLFxuICAgICAgICBsYWJlbDogYCR7cHJlZml4fS1sYWJlbGAsXG4gICAgICAgIGxhYmVsTWFpbjogYCR7cHJlZml4fS1sYWJlbC1tYWluYCxcbiAgICAgICAgbGFiZWxOb25Sb290OiBgJHtwcmVmaXh9LWxhYmVsLW5vbi1yb290YCxcbiAgICAgICAgbGFiZWxMYXN0Q2hpbGQ6IGAke3ByZWZpeH0tbGFiZWwtbGFzdC1jaGlsZGAsXG4gICAgICAgIGxhYmVsTGluZTogYCR7cHJlZml4fS1sYWJlbC1saW5lYCxcbiAgICAgICAgY2hpbGRyZW46IGAke3ByZWZpeH0tY2hpbGRyZW5gLFxuICAgICAgICBsaUxhc3RDaGlsZDogYCR7cHJlZml4fS10cmVlLWxpLWxhc3QtY2hpbGRgLFxuICAgICAgICBpbmRlbnRUcmVlOiAnMWVtJyxcbiAgICAgICAgaW5kZW50Q2hpbGRyZW46ICczZW0nLFxuICAgICAgICBsYWJlbFRvcFBhZGRpbmc6ICcwLjJlbScsXG5cbiAgICAgICAgLi4uIG9wdGlvbnMsXG4gICAgfTtcbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBzaG9ydCByYW5kb20gc3RyaW5nLlxuICovXG5mdW5jdGlvbiByYW5kb21TdHJpbmcoKTogc3RyaW5ne1xuICAgIHJldHVybiAndCcrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG59XG4iXX0=

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxPQUFPLEVBQ1AsR0FBRyxHQUNOLE1BQU0sT0FBTyxDQUFDO0FBRWYsT0FBTyxFQUNILE9BQU8sRUFDUCxHQUFHLEdBQ04sQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgdHJlZWlmeSxcbiAgICBydW4sXG59IGZyb20gJy4vbGliJztcblxuZXhwb3J0IHtcbiAgICB0cmVlaWZ5LFxuICAgIHJ1bixcbn07XG4iXX0=

exports.treeify = treeify;
exports.run = run;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,